# AppVeyor.com is a Continuous Integration service to build and run tests under
# Windows
# https://ci.appveyor.com/project/ESRF/pyFAI

version: 2023.1.{build}
#shallow_clone: true
clone_depth: 1
build: false

notifications:
- provider: Email
  to:
  - silx-ci@edna-site.org
  subject: '[CI] appveyor'
  on_build_success: false
  on_build_failure: false
  on_build_status_changed: true

os:
    - Visual Studio 2015

cache:
    - '%LOCALAPPDATA%\pip\Cache'

image: Visual Studio 2019

environment:
    global:
        WIN_SDK_ROOT: "C:\\Program Files\\Microsoft SDKs\\Windows"
        VENV_BUILD_DIR: "venv_build"
        VENV_TEST_DIR: "venv_test"

    matrix:

#         # Python 3.7
#         - PYTHON_DIR: "C:\\Python37-x64"
#           PYTHON_ARCH: "64"

        # Python 3.10
        - PYTHON_DIR: "C:\\Python310-x64"
          PYTHON_ARCH: "64"

        # Python 3.12
        - PYTHON_DIR: "C:\\Python312-x64"
          PYTHON_ARCH: "64"

        # Python 3.13
        - PYTHON_DIR: "C:\\Python313-x64"
          PYTHON_ARCH: "64"

init:
  - ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

install:
    # Add Python to PATH
    - "SET PATH=%PYTHON_DIR%;%PYTHON_DIR%\\Scripts;%PATH%"

    # Activate visual studio compiler
    - '"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Auxiliary\\Build\\vcvars64.bat"'
    - 'cl.exe'

    # Upgrade/install distribution modules
    - 'python -m pip install --upgrade pip'
    - 'pip install --upgrade build meson meson-python ninja'

    # Install virtualenv
    - "pip install --upgrade virtualenv"
    - "virtualenv --version"

build_script:
    # Create build virtualenv
    - "virtualenv --clear %VENV_BUILD_DIR%"
    - "%VENV_BUILD_DIR%\\Scripts\\activate.bat"

    # Install build dependencies
    - "python -m pip install --upgrade pip"
    - 'pip install --upgrade meson meson-python ninja build'
    - "pip install --upgrade wheel tomli"
    - "pip install numpy cython --upgrade"
    - "pip install scipy --upgrade --pre"
    - "pip install silx"
    - "dir"
    - "pip install --trusted-host www.silx.org --find-links http://www.silx.org/pub/wheelhouse/ -r ci/requirements_appveyor.txt --upgrade"

    # Print Python info
    - "python ci\\info_platform.py"
    - "pip list"
    - "dir"

    # Build
    - "python run_tests.py -m"
    - "python -m build --wheel"
    - ps: "ls dist"
    # Install the generated wheel package to test it
    - "pip install --pre --no-index --find-links dist/ pyFAI"

  # Leave build virtualenv
    - "%VENV_BUILD_DIR%\\Scripts\\deactivate.bat"
    - "rmdir %VENV_BUILD_DIR% /s /q"

test_script:
    # Create test virtualenv
    - "virtualenv --clear %VENV_TEST_DIR%"
    - "%VENV_TEST_DIR%\\Scripts\\activate.bat"

    # Upgrade distribution modules
    - "python -m pip install --upgrade pip tomli"
    # Install other build dependencies
    - "pip install --trusted-host www.silx.org --find-links http://www.silx.org/pub/wheelhouse/ -r ci/requirements_appveyor.txt --upgrade"
    # Install the generated wheel package to test it
    - "pip install --pre --find-links dist/ pyFAI"

    # Print Python info
    - "python ci\\info_platform.py"
    - "pip list"
    - "python run_tests.py --installed"

    # Leave test virtualenv
    - "%VENV_TEST_DIR%\\Scripts\\deactivate.bat"
    - "rmdir %VENV_TEST_DIR% /s /q"

artifacts:
    # Archive the generated wheel package in the ci.appveyor.com build report.
    - path: dist\*
